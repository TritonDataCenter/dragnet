#!/usr/bin/env node

/*
 * dn: create, query, and destroy indexes on data stored in Manta
 */

var mod_assert = require('assert');
var mod_bunyan = require('bunyan');
var mod_jsprim = require('jsprim');
var mod_path = require('path');
var mod_tab = require('tab');
var mod_vasync = require('vasync');
var OptionParser = require('posix-getopt').BasicParser;
var VError = require('verror');
var sprintf = require('extsprintf').sprintf;

var mod_streamutil = require('../lib/stream-util');
var schemaIndex = require('../schema/user-index');
var schemaQuery = require('../schema/user-query');
var LocalDataStore = require('../lib/datastore-local');
var JsonLineStream = require('../lib/format-json');
var QueryScanner = require('../lib/query-scan');

var dnArg0 = mod_path.basename(process.argv[1]);
var dnCmds = {
    'index': cmdIndex,
    'destroy': cmdDestroy,
    'query': cmdQuery,
    'scan': cmdScan
};
var dnUsage = [
    'usage: dn index INDEX_CONFIG_FILE\n',
    '       dn destroy INDEX_NAME\n',
    '       dn query INDEX_NAME QUERY_CONFIG_FILE ...\n',
    '       dn scan INDEX_CONFIG_FILE QUERY_CONFIG_FILE'
].join('');
var dnLog;

function usage(err)
{
	if (err)
		console.error('%s: %s', dnArg0, err.message);

	console.error(dnUsage);
	process.exit(2);
}

function fatal(err)
{
	console.error('%s: %s', dnArg0, err.message);
	process.exit(1);
}

function main()
{
	var cmdname, cmdfunc;

	if (process.argv.length < 3)
		usage();

	cmdname = process.argv[2];
	if (!dnCmds.hasOwnProperty(cmdname))
		usage(new VError('no such command: "%s"', cmdname));

	dnLog = new mod_bunyan({
	    'name': 'dragnet',
	    'level': process.env['LOG_LEVEL'] || 'warn'
	});

	process.stdout.on('error', function (err) {
		if (err.code == 'EPIPE')
			process.exit(0);
		throw (err);
	});
	cmdfunc = dnCmds[cmdname];
	cmdfunc(cmdname, process.argv.slice(3));
}

function cmdIndex(cmdname, argv)
{
	console.log('"%s" not yet implemented', cmdname);
}

function cmdDestroy(cmdname, argv)
{
	console.log('"%s" not yet implemented', cmdname);
}

function cmdQuery(cmdname, argv)
{
	console.log('"%s" not yet implemented', cmdname);
}

function cmdScan(cmdname, argv)
{
	var indexname, indexConf;
	var optparser, option;
	var queryConf = {
	    'breakdowns': []
	};
	var output = cmdScanOutputPretty;
	var showinvalid = false;

	argv.unshift('', '');
	optparser = new OptionParser(':b:(breakdowns)f:(filter)r(raw)' +
	    'S(show-invalid)', argv);
	while ((option = optparser.getopt()) !== undefined) {
		switch (option.option) {
		case 'f':
			try {
				queryConf.filter = JSON.parse(option.optarg);
			} catch (ex) {
				usage(new VError(ex, 'invalid filter'));
			}
			break;

		case 'b':
			var fields = option.optarg.split(',');
			queryConf.breakdowns =
			    queryConf.breakdowns.concat(fields);
			break;

		case 'r':
			output = cmdScanOutputRaw;
			break;

		case 'S':
			showinvalid = true;
			break;

		default:
			usage();
			break;
		}
	}

	if (optparser.optind() != argv.length - 1)
		usage();

	indexname = argv[optparser.optind()];
	mod_vasync.waterfall([
	    function (callback) {
		mod_streamutil.readFileJson({
		    'filename': indexname,
		    'schema': schemaIndex
		}, callback);
	    },
	    function (conf, callback) {
		indexConf = conf;
		queryConf.index = indexConf.name;
		var err = mod_jsprim.validateJsonObject(schemaQuery, queryConf);
		callback(err);
	    }
	], function (err) {
		if (err)
			fatal(err);

		if (!indexConf.hasOwnProperty('fsroot'))
			err = new VError('expected "fsroot"');
		else if (indexConf.format != 'json')
			err = new VError('only "json" format is supported');

		if (err)
			fatal(err);

		var datastore, source, parser, scanner;

		datastore = new LocalDataStore({
		    'log': dnLog,
		    'fsroot': indexConf.fsroot
		});
		source = datastore.stream();
		source.on('err', fatal);

		parser = new JsonLineStream();
		source.pipe(parser);
		if (showinvalid) {
			parser.on('invalid_record', function (str, idx, perr) {
				console.error('warn: bad record at line %d: %s',
				    idx, perr.toString());
				console.error('      input: %s', str);
			});
		}

		scanner = new QueryScanner({
		    'log': dnLog,
		    'index': indexConf,
		    'query': queryConf
		});
		parser.pipe(scanner);

		scanner.on('data', function (rows) {
			output({
			    'index': indexConf,
			    'columns': queryConf.breakdowns,
			    'rows': rows,
			    'bucketizer': scanner.bucketizer()
			});
		});
	});
}

function cmdScanOutputRaw(results)
{
	console.log(JSON.stringify(results.rows, null, '\t'));
}

function cmdScanOutputPretty(results)
{
	var hasquantize = false;
	var columndefsbyname = {};
	var coldefs, i, tablefields;

	results.index.columns.forEach(function (coldef) {
		if (typeof (coldef) == 'string') {
			columndefsbyname[coldef] = {
			    'name': coldef,
			    'field': coldef
			};
		} else {
			columndefsbyname[coldef.name] = coldef;
		}
	});

	coldefs = results.columns.map(function (colname) {
		if (columndefsbyname.hasOwnProperty(colname))
			return (columndefsbyname[colname]);
		return ({ 'name': colname });
	});

	for (i = 0; i < coldefs.length; i++) {
		if (coldefs[i].aggr) {
			hasquantize = true;
			break;
		}
	}

	if (hasquantize) {
		cmdScanOutputPrettyQuantized(results, coldefs);
		return;
	}

	tablefields = coldefs.map(function (c) {
		return ({
		    'label': c.name.toUpperCase(),
		    'width': c.name.toUpperCase().toString().length
		});
	});
	tablefields.push({
	    'label': 'VALUE',
	    'width': 'VALUE'.length,
	    'align': 'right'
	});

	mod_assert.ok(results.rows.length > 0);
	if (results.rows.length == 1 && typeof (results.rows[0]) == 'number')
		results.rows[0] = [ results.rows[0] ];

	results.rows.forEach(function (row) {
		var width;

		mod_assert.ok(row.length == coldefs.length + 1);
		coldefs.forEach(function (c, j) {
			if (typeof (row[j]) == 'number')
				tablefields[j].align = 'right';
			else
				mod_assert.equal('string', typeof (row[j]));

			width = row[j].toString().length;
			if (tablefields[j].width < width)
				tablefields[j].width = width;
		});

		mod_assert.equal('number', typeof (row[row.length - 1]));
		width = row[row.length - 1].toString().length;
		if (tablefields[row.length - 1].width < width)
			tablefields[row.length - 1].width = width;
	});

	mod_tab.emitTable({
	    'columns': tablefields,
	    'rows': results.rows.slice(0).sort(function (a, b) {
		var j, d;

		mod_assert.ok(Array.isArray(a) && Array.isArray(b));
		mod_assert.equal(a.length, b.length);
		for (j = 0; j < a.length; j++) {
			if (typeof (a[j]) == 'string')
				d = a[j].localeCompare(b[j]);
			else
				d = b[j] - a[j];

			if (d !== 0)
				return (d);
		}

		return (0);
	    })
	});
}

function cmdScanOutputPrettyQuantized(results, coldefs)
{
	var quantizedcol, stream, bucketizer;

	quantizedcol = coldefs[coldefs.length - 1];
	mod_assert.equal(typeof (quantizedcol.aggr), 'string');
	stream = process.stdout;
	bucketizer = results.bucketizer;

	results.rows.forEach(function (row) {
		var discrete_values = row.slice(0, coldefs.length - 1);
		var distr = row.slice(coldefs.length - 1);

		stream.write(discrete_values.join(', ') + '\n');
		printDistribution(stream, distr, bucketizer);
		stream.write('\n');
	});
}

function printDistribution(stream, distr, bucketizer)
{
	var total, count, normalized, dots;
	var bi, di, i, min;

	stream.write('           ');
	stream.write(
	    'value  ------------- Distribution ------------- count\n');

	if (distr.length === 0)
		return;

	total = 0;
	for (di = 0; di < distr.length; di++)
		total += distr[di][1];

	for (bi = 0, di = 0; di < distr.length + 1; bi++) {
		if (di == distr.length) {
			count = 0;
			di++;
		} else if (distr[di][0] == bi) {
			count = distr[di][1];
			di++;
		} else {
			count = 0;
		}

		normalized = Math.round(40 * count / total);
		dots = '';
		for (i = 0; i < normalized; i++)
			dots += '@';
		for (; i < 40; i++)
			dots += ' ';

		min = bucketizer.bucketMin(bi);
		stream.write(sprintf('%16s |%s %s\n',
		    min.toString(), dots, count));
	}
}

main();
