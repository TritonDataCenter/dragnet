#!/usr/bin/env node
/* vim: set ft=javascript: */

/*
 * dn: dragnet command-line interface
 */

var timeStarted = process.hrtime();
var mod_assert = require('assert');
var mod_bunyan = require('bunyan');
var mod_dashdash = require('dashdash');
var mod_fs = require('fs');
var mod_jsprim = require('jsprim');
var mod_path = require('path');
var mod_tab = require('tab');
var VError = require('verror');
var sprintf = require('extsprintf').sprintf;

var mod_config_local = require('../lib/config-local');
var mod_dragnet = require('../lib/dragnet');
var mod_dragnet_impl = require('../lib/dragnet-impl'); /* XXX */
var SkinnerFlattener = require('../lib/skinner-flattener');
var attrsParse = require('../lib/attr-parser');
var timeRequireDone = process.hrtime(timeStarted);

/*
 * Program name and usage
 */
var dnArg0 = mod_path.basename(process.argv[1]);

/*
 * Subcommands
 */
var dnCmds = {
    'datasource-add': dnCmdDatasourceAdd,
    'datasource-list': dnCmdDatasourceList,
    'datasource-remove': dnCmdDatasourceRemove,
    'datasource-update': dnCmdDatasourceUpdate,
    'datasource-show': dnCmdDatasourceShow,
    'metric-add': dnCmdMetricAdd,
    'metric-list': dnCmdMetricList,
    'metric-remove': dnCmdMetricRemove,
    'build': dnCmdBuild,
    'index-config': dnCmdIndexConfig,
    'index-read': dnCmdIndexRead,
    'index-scan': dnCmdIndexScan,
    'query': dnCmdQuery,
    'scan': dnCmdScan
};

/*
 * Internal state
 */
var dnTrackTime = false;	/* option to print program execution time */
var dnDone = false;		/* see process.on('exit') handler */
var dnLog;			/* bunyan logger */
var dnConfigBackend;		/* dragnet configuration backend */
var dnConfig;			/* dragnet configuration */
var dnStream;			/* data stream (for debugging) */

/*
 * Main program entry point.
 */
function main()
{
	var optind, cmdname, cmdfunc;

	dnLog = new mod_bunyan({
	    'name': 'dragnet',
	    'level': process.env['LOG_LEVEL'] || 'warn'
	});

	process.stdout.on('error', function (err) {
		if (err.code == 'EPIPE')
			process.exit(0);
		throw (err);
	});

	optind = 2;
	if (process.argv[optind] == '-t') {
		dnTrackTime = true;
		optind++;
	}

	if (process.argv.length < optind + 1)
		usage(new VError('no command specified'));

	cmdname = process.argv[optind];
	if (!dnCmds.hasOwnProperty(cmdname))
		usage(new VError('no such command: "%s"', cmdname));

	cmdfunc = dnCmds[cmdname];
	dnConfigBackend = mod_config_local.createConfigBackend();
	dnConfigBackend.load(function (err, config) {
		if (err && err['code'] != 'ENOENT')
			fatal(err);
		dnConfig = config;
		cmdfunc(cmdname, process.argv.slice(optind + 1));
	});
}

/*
 * usage([error]): pretty-print an error message, then print usage information,
 * then exit.
 */
function usage(err)
{
	var usagepath, usagetext;

	if (err)
		console.error('%s: %s', dnArg0, err.message);

	usagepath = mod_path.join(__dirname, '../share/usage.txt');

	try {
		usagetext = mod_fs.readFileSync(usagepath, 'utf8');
	} catch (ex) {
		fatal(new VError(ex, 'failed to read usage'));
	}

	console.error(usagetext);
	process.exit(2);
}

/*
 * fatal(error): pretty-print an error message and exit.
 */
function fatal(err)
{
	console.error('%s: %s', dnArg0, err.message);
	process.exit(1);
}

/*
 * warn(context, kind, error): emit a warning.  This isn't just for arbitrary
 * warnings, but specifically "vstream"-style warnings, which may have a
 * "context" and always have a "kind" and an "error".
 */
function warn(context, kind, error)
{
	console.error('warn: %s', error.message);
	if (context !== null)
		console.error('    at ' + context.label());
}

var dnOptions = [ {
    'names': [ 'after', 'A' ],
    'type': 'date'
}, {
    'names': [ 'assetroot' ],
    'type': 'string',
    'default': '/manta/public/dragnet/assets'
}, {
    'names': [ 'backend' ],
    'type': 'string'
}, {
    'names': [ 'before', 'B' ],
    'type': 'date'
}, {
    'names': [ 'breakdowns', 'b' ],
    'type': 'arrayOfString',
    'default': []
}, {
    'names': [ 'counters' ],
    'type': 'bool'
}, {
    'names': [ 'data-format' ],
    'type': 'string',
    'default': 'json'
}, {
    'names': [ 'datasource' ],
    'type': 'string'
}, {
    'names': [ 'dry-run', 'n' ],
    'type': 'bool',
    'default': false
}, {
    'names': [ 'filter', 'f' ],
    'type': 'string'
}, {
    'names': [ 'gnuplot' ],
    'type': 'bool'
}, {
    'names': [ 'interval', 'i' ],
    'type': 'string',
    'default': 'day'
}, {
    'names': [ 'index-config' ],
    'type': 'string'
}, {
    'names': [ 'index-path' ],
    'type': 'string'
}, {
    'names': [ 'path' ],
    'type': 'string'
}, {
    'names': [ 'points' ],
    'type': 'bool'
}, {
    'names': [ 'raw' ],
    'type': 'bool'
}, {
    'names': [ 'time-field' ],
    'type': 'string'
}, {
    'names': [ 'time-format' ],
    'type': 'string'
}, {
    'names': [ 'verbose', 'v' ],
    'type': 'bool',
    'default': false
}, {
    'names': [ 'warnings' ],
    'type': 'bool'
} ];

/*
 * Given a list of option names, return the corresponding dashdash
 * configuration.
 */
function dnOptionConfig(useroptions)
{
	var rv, i, j;
	var options;

	rv = [];
	options = useroptions;
	for (i = 0; i < options.length; i++) {
		for (j = 0; j < dnOptions.length; j++) {
			if (dnOptions[j].names.indexOf(options[i]) != -1)
				break;
		}

		if (j == dnOptions.length)
			throw (new VError('unknown option: "%s"', options[i]));

		rv.push(dnOptions[j]);
	}

	return (rv);
}

/*
 * Given "argv" (as trimmed by main()) and a list of user options, parse the
 * arguments and return the dashdash "options" object.
 */
function dnParseArgs(argv, useroptions)
{
	var parser, rv;

	parser = mod_dashdash.createParser({
	    'options': dnOptionConfig(useroptions),
	    'interspersed': true,
	    'allowUnknown': false
	});

	try {
		rv = parser.parse({ 'argv': argv, 'slice': 0 });
	} catch (ex) {
		usage(ex);
	}

	dnExpandArray(rv, 'breakdowns');
	if (rv.filter) {
		try {
			rv.filter = JSON.parse(rv.filter);
		} catch (ex) {
			usage(new VError(ex, 'invalid filter'));
		}
	}
	return (rv);
}

/*
 * Given "options" as returned by dashdash's parser and a "field" whose value
 * should be an array of strings, split up each entry of the field's value on
 * commas.  This is because we want all of these to be equivalent:
 *
 *    -b one,two,three
 *    -b one,two -b three
 *    -b one -b two -b three
 */
function dnExpandArray(options, field)
{
	if (!Array.isArray(options[field]))
		return;

	var tmp = options[field];
	options[field] = [];
	tmp.forEach(function (v) {
		var list = attrsParse(v);
		if (list instanceof Error)
			usage(new VError(list, 'bad value for "%s" ("%s")',
			    field, v));
		list.forEach(function (s) {
			if (!s.field)
				s.field = s.name;

			if (s.hasOwnProperty('step')) {
				s.step = parseInt(s.step, 10);
				if (isNaN(s.step))
					usage(new VError('field "%s": "step" ' +
					    'must be a number', s.name));
			}

			options[field].push(s);
		});
	});
}

/*
 * Check for missing or extra NON-option arguments.
 */
function dnCheckArgCount(options, expected)
{
	if (options._args.length < expected)
		usage(new Error('missing arguments'));

	if (options._args.length > expected)
		usage(new Error('extra arguments'));
}

/*
 * "dn datasource-add ..." implementation
 */
function dnCmdDatasourceAdd(cmdname, argv)
{
	var options, dsname, dsconfig, newconfig;

	options = dnParseArgs(argv,
	    [ 'backend', 'data-format', 'filter', 'path', 'time-field',
		'time-format', 'index-path' ]);
	if (!options.path)
		usage(new Error('"path" option is required'));

	dnCheckArgCount(options, 1);
	dsname = options._args[0];
	dsconfig = {
	    'name': dsname,
	    'backend': options.backend || 'file',
	    'backend_config': {
	        'path': options.path,
		'indexPath': options.index_path,
		'timeFormat': options.time_format,
		'timeField': options.time_field
	    },
	    'filter': options.filter || null,
	    'dataFormat': options.data_format
	};
	newconfig = dnConfig.datasourceAdd(dsconfig);
	if (newconfig instanceof Error)
		fatal(newconfig);
	dnConfigBackend.save(newconfig.serialize(), function (err) {
		if (err)
			fatal(err);
		dnConfig = newconfig;
		dnDone = true;
	});
}

/*
 * "dn datasource-update ..." implementation
 */
function dnCmdDatasourceUpdate(cmdname, argv)
{
	var options, dsname, dsupdate, newconfig;

	options = dnParseArgs(argv,
	    [ 'backend', 'data-format', 'filter', 'path', 'time-field',
		'time-format', 'index-path' ]);

	dnCheckArgCount(options, 1);
	dsname = options._args[0];
	dsupdate = {
	    'backend': options.backend,
	    'backend_config': {
	        'path': options.path,
		'indexPath': options.index_path,
		'timeFormat': options.time_format,
		'timeField': options.time_field
	    },
	    'filter': options.filter || null,
	    'dataFormat': options.data_format
	};
	newconfig = dnConfig.datasourceUpdate(dsname, dsupdate);
	if (newconfig instanceof Error)
		fatal(newconfig);
	dnConfigBackend.save(newconfig.serialize(), function (err) {
		if (err)
			fatal(err);
		dnConfig = newconfig;
		dnDone = true;
	});
}


/*
 * "dn datasource-remove ..." implementation
 */
function dnCmdDatasourceRemove(cmdname, argv)
{
	var options, dsname, newconfig;

	options = dnParseArgs(argv, []);
	dnCheckArgCount(options, 1);
	dsname = options._args[0];
	newconfig = dnConfig.datasourceRemove(dsname);
	if (newconfig instanceof Error)
		fatal(newconfig);
	dnConfigBackend.save(newconfig.serialize(), function (err) {
		if (err)
			fatal(err);
		dnConfig = newconfig;
		dnDone = true;
	});
}

/*
 * "dn datasource-list ..." implementation
 */
function dnCmdDatasourceList(cmdname, argv)
{
	var options, columns, tab;

	options = dnParseArgs(argv, [ 'verbose' ]);
	dnCheckArgCount(options, 0);

	columns = [ {
	    'label': 'DATASOURCE',
	    'width': 20
	}, {
	    'label': 'LOCATION',
	    'width': 59
	} ];
	tab = new mod_tab.TableOutputStream({
	    'omitHeader': true,
	    'columns': columns
	});
	tab.writeHeader();
	dnConfig.datasourceList(function (dsname, ds) {
		dnDatasourcePrint(tab, dsname, ds, options);
	});

	dnDone = true;
}

/*
 * Common code for printing a single datasource to the given node-tab table,
 * optionally in verbose mode.
 */
function dnDatasourcePrint(tab, dsname, ds, options)
{
	var location;

	if (ds.ds_backend == 'manta')
		location = sprintf('manta://us-east.manta.joyent.com%s',
		    ds.ds_backend_config.path);
	else
		location = sprintf('file:/%s',
		    ds.ds_backend_config.path);

	tab.writeRow({
	    'DATASOURCE': dsname,
	    'LOCATION': location
	});

	if (!options.verbose)
		return;

	if (ds.ds_filter !== null) {
		console.log(sprintf('%4s%-11s %s', '', 'filter:',
		    JSON.stringify(ds.ds_filter)));
	}

	console.log(sprintf('%4s%-11s %s', '', 'dataFormat:',
	    JSON.stringify(ds.ds_format)));

	mod_jsprim.forEachKey(ds.ds_backend_config, function (k, v) {
		if (k == 'path')
			return;

		console.log(sprintf('%4s%-11s %s', '', k + ':',
		    JSON.stringify(v)));
	});
}

/*
 * "dn datasource-show ..." implementation
 */
function dnCmdDatasourceShow(cmdname, argv)
{
	var options, columns, tab, dsname, ds;

	options = dnParseArgs(argv, [ 'verbose' ]);
	dnCheckArgCount(options, 1);
	dsname = options._args[0];
	ds = dnConfig.datasourceGet(dsname);
	if (ds === null)
		fatal(new Error('unknown datasource: "%s"'));

	columns = [ {
	    'label': 'DATASOURCE',
	    'width': 20
	}, {
	    'label': 'LOCATION',
	    'width': 59
	} ];
	tab = new mod_tab.TableOutputStream({
	    'omitHeader': true,
	    'columns': columns
	});
	tab.writeHeader();
	dnDatasourcePrint(tab, dsname, ds, options);
	dnDone = true;
}

/*
 * "dn metric-add ..." implementation
 */
function dnCmdMetricAdd(cmdname, argv)
{
	var options, dsname, metname, mconfig, newconfig;

	options = dnParseArgs(argv, [ 'breakdowns', 'filter' ]);
	dnCheckArgCount(options, 2);
	dsname = options._args[0];
	metname = options._args[1];
	mconfig = {
	    'name': metname,
	    'datasource': dsname,
	    'filter': options.filter || null,
	    'breakdowns': options.breakdowns
	};

	newconfig = dnConfig.metricAdd(mconfig);
	if (newconfig instanceof Error)
		fatal(newconfig);

	dnConfigBackend.save(newconfig.serialize(), function (err) {
		if (err)
			fatal(err);
		dnConfig = newconfig;
		dnDone = true;
	});
}

/*
 * "dn metric-remove ..." implementation
 */
function dnCmdMetricRemove(cmdname, argv)
{
	var options, dsname, metname, newconfig;

	options = dnParseArgs(argv, []);
	dnCheckArgCount(options, 2);
	dsname = options._args[0];
	metname = options._args[1];
	newconfig = dnConfig.metricRemove(dsname, metname);
	if (newconfig instanceof Error)
		fatal(newconfig);
	dnConfigBackend.save(newconfig.serialize(), function (err) {
		if (err)
			fatal(err);
		dnConfig = newconfig;
		dnDone = true;
	});
}

/*
 * "dn metric-list ..." implementation
 */
function dnCmdMetricList(cmdname, argv)
{
	var options, dsname, columns, tab;

	options = dnParseArgs(argv, [ 'verbose' ]);
	dnCheckArgCount(options, 1);
	dsname = options._args[0];

	columns = [ {
	    'label': 'DATASOURCE',
	    'width': 20
	}, {
	    'label': 'METRIC',
	    'width': 20
	} ];
	tab = new mod_tab.TableOutputStream({
	    'omitHeader': true,
	    'columns': columns
	});
	tab.writeHeader();
	dnConfig.datasourceListMetrics(dsname, function (metname, mconfig) {
		tab.writeRow({
		    'DATASOURCE': mconfig.m_datasource,
		    'METRIC': metname
		});

		if (!options.verbose)
			return;

		if (mconfig.m_filter !== null) {
			console.log(sprintf('%4s%-11s %s', '', 'filter:',
			    JSON.stringify(mconfig.m_filter)));
		}

		if (mconfig.m_breakdowns.length === 0)
			return;

		console.log(sprintf('%4s%-11s %s', '', 'breakdowns:',
		    mconfig.m_breakdowns.map(
		        function (b) { return (b.b_name); }).join(', ')));
	});

	dnDone = true;
}

function dnReadIndexConfig(filename, callback)
{
	mod_fs.readFile(filename, function (err, contents) {
		var parsed;
		if (err) {
			callback(new VError(err, 'read "%s"', filename));
			return;
		}

		try {
			parsed = JSON.parse(contents);
		} catch (ex) {
			callback(new VError(ex, 'parse "%s"', filename));
			return;
		}

		callback(null, parsed);
	});
}

/*
 * "dn build ..." implementation
 */
function dnCmdBuild(cmdname, argv)
{
	var options, dsname, buildargs;

	options = dnParseArgs(argv, [
	    /* general options */
	    'after', 'before', 'counters', 'dry-run', 'index-config',
	    'interval', 'warnings',

	    /* manta-specific options */
	    'assetroot'
	]);
	dnCheckArgCount(options, 1);
	dsname = options._args[0];

	buildargs = {
	    'log': dnLog,
	    'config': dnConfig,
	    'dsname': dsname,
	    'dryRun': options.dry_run,
	    'interval': options.interval,
	    'timeBefore': options.before || null,
	    'timeAfter': options.after || null,
	    'assetroot': options.assetroot
	};

	if (options.index_config) {
		dnReadIndexConfig(options.index_config, function (err, config) {
			if (err)
				fatal(err);

			buildargs['indexConfig'] = config;
			dnBuild(dsname, buildargs, options);
		});
	} else {
		dnBuild(dsname, buildargs, options);
	}
}

function dnBuild(dsname, buildargs, options)
{
	dnStream = mod_dragnet.build(buildargs, function (err, ds) {
		if (err)
			fatal(err);
		if (!buildargs.dryRun) {
			console.error('indexes for "%s" built', dsname);
			if (options.counters)
				dnPrintCounters(dnStream);
			if (options.warnings)
				dnShowWarnings(dnStream);
		}
		dnDone = true;
		ds.close();
	});
}

function dnQueryConfig(options)
{
	var queryconfig, qc;

	queryconfig = {};
	queryconfig.breakdowns = options.breakdowns;
	if (options.after)
		queryconfig.timeAfter = options.after;
	if (options.before)
		queryconfig.timeBefore = options.before;
	if (options.filter)
		queryconfig.filter = options.filter;

	qc = mod_dragnet.queryLoad({ 'query': queryconfig });
	if (qc instanceof Error)
		fatal(qc);

	if (options.gnuplot && qc.qc_breakdowns.length != 1) {
		fatal(new VError(
		    '--gnuplot can only be used with exactly one breakdown'));
	}

	return ({
	    'query': qc,
	    'dryRun': options.dry_run,
	    'interval': options.interval,
	    'assetroot': options.assetroot
	});
}

/*
 * "dn index-config" implementation
 */
function dnCmdIndexConfig(cmdname, argv)
{
	var options, dsname, cfg;

	options = dnParseArgs(argv, []);
	dnCheckArgCount(options, 1);
	dsname = options._args[0];

	cfg = mod_dragnet.indexConfig({
	    'config': dnConfig,
	    'dsname': dsname
	});
	if (cfg instanceof Error)
		fatal(cfg);

	console.log(JSON.stringify(cfg));
	dnDone = true;
}

/*
 * "dn index-read ..." implementation
 */
function dnCmdIndexRead(cmdname, argv)
{
	var options, dsname, opargs;

	options = dnParseArgs(argv, [ 'index-config', 'interval' ]);
	dnCheckArgCount(options, 1);
	dsname = options._args[0];

	opargs = {
	    'log': dnLog,
	    'config': dnConfig,
	    'dsname': dsname,
	    'interval': options.interval
	};
	if (options.index_config) {
		dnReadIndexConfig(options.index_config,
		    function (err, indexConfig) {
			if (err)
				fatal(err);

			opargs.indexConfig = indexConfig;
			dnIndexRead(opargs);
		    });
	} else {
		dnIndexRead(opargs);
	}
}

function dnIndexRead(opargs)
{
	mod_dragnet.indexRead(opargs, function (err) {
		if (err)
			fatal(err);
		dnDone = true;
	});
}

/*
 * "dn index-scan ..." implementation
 */
function dnCmdIndexScan(cmdname, argv)
{
	var options, dsname, opargs;

	options = dnParseArgs(argv, [
	    /* general scan/query arguments */
	    'before', 'after', 'filter', 'breakdowns',
	    'counters', 'index-config', 'interval'
	]);

	options.points = true;
	dnCheckArgCount(options, 1);
	dsname = options._args[0];

	opargs = {
	    'log': dnLog,
	    'config': dnConfig,
	    'dsname': dsname,
	    'interval': options.interval,
	    'timeBefore': options.before || null,
	    'timeAfter': options.after || null
	};
	if (options.index_config) {
		dnReadIndexConfig(options.index_config,
		    function (err, indexConfig) {
			if (err)
				fatal(err);

			opargs.indexConfig = indexConfig;
			dnIndexScan(opargs, options);
		    });
	} else {
		dnIndexScan(opargs, options);
	}
}

function dnIndexScan(opargs, options)
{
	var op;
	dnStream = op = mod_dragnet.indexScan(opargs);
	dnOutput(null, options, op);
}

/*
 * "dn query ..." implementation
 */
function dnCmdQuery(cmdname, argv)
{
	var options, dsname, ds;
	var queryargs, op;

	options = dnParseArgs(argv, [
	    /* general scan/query arguments */
	    'before', 'after', 'filter', 'breakdowns', 'raw', 'points',
	    'counters', 'interval', 'gnuplot',

	    /* manta-specific arguments */
	    'assetroot', 'dry-run'
	]);

	dnCheckArgCount(options, 1);
	dsname = options._args[0];
	ds = mod_dragnet.datasourceForName({
	    'log': dnLog,
	    'config': dnConfig,
	    'dsname': dsname
	});
	if (ds instanceof Error)
		fatal(ds);

	queryargs = dnQueryConfig(options);
	op = ds.query(queryargs);
	dnOutput(queryargs.query, options, op, function () { ds.close(); });
}

/*
 * "dn scan ..." implementation
 */
function dnCmdScan(cmdname, argv)
{
	var options, dsname, ds;
	var scanargs, op;

	options = dnParseArgs(argv, [
	    /* general scan/query arguments */
	    'before', 'after', 'filter', 'breakdowns', 'raw', 'points',
	    'counters', 'warnings', 'gnuplot',

	    /* manta-specific arguments */
	    'assetroot', 'dry-run'
	]);

	dnCheckArgCount(options, 1);
	dsname = options._args[0];
	ds = mod_dragnet.datasourceForName({
	    'log': dnLog,
	    'config': dnConfig,
	    'dsname': dsname
	});
	if (ds instanceof Error)
		fatal(ds);

	scanargs = dnQueryConfig(options);
	op = ds.scan(scanargs);
	dnOutput(scanargs.query, options, op, function () { ds.close(); });
}

/*
 * Given a stream in a "vstream" pipeline, walk the whole pipeline and attach a
 * "warn" listener for each one that will print warnings to the console.
 */
function dnShowWarnings(op)
{
	op.vsHead().vsWalk(function (s) { s.on('warn', warn); });
}

/*
 * Given a stream in a "vstream" pipeline, walk the whole pipeline and emit all
 * non-zero counters for each stream.
 */
function dnPrintCounters(stream)
{
	stream.vsHead().vsWalk(function (s) {
		s.vsDumpCounters(process.stderr);
	});
}

/*
 * Given a query configuration, command-line options, and a stream that will
 * emit results, print out the results.  This takes care of looking at the "raw"
 * and "points" options and flattening data points as needed.  This is used for
 * both "query" and "scan" (which output the same thing).
 */
function dnOutput(query, options, op, callback)
{
	var output, stream;

	op.on('error', fatal);

	if (options.points) {
		stream = op;
	} else {
		stream = new SkinnerFlattener({
		    'skinnerOptions': mod_dragnet_impl.queryAggrStreamConfig(
		        { 'query': query })
		});
		op.pipe(stream);
	}

	if (!options.dry_run) {
		dnStream = stream;
		output = options.raw || options.points ?
		    dnOutputRaw :
		    options.gnuplot ? dnOutputGnuplot : dnOutputPretty;

		stream.on('data', function (rows) {
			output({
			    'options': options,
			    'query': query,
			    'rows': rows
			});
		});

		if (options.warnings)
			dnShowWarnings(op);
	} else {
		stream.on('data', function () {});
	}

	stream.on('end', function () {
		if (!options.dry_run && options.counters)
			dnPrintCounters(stream);
		dnDone = true;
		if (callback)
			callback();
	});
}

/*
 * Outputter that emits data as plain JSON.
 */
function dnOutputRaw(results)
{
	console.log(JSON.stringify(results.rows));
}

/*
 * Sort the rows in the results table for pretty-printing.
 */
function dnOutputSortRows(results)
{
	return (results.rows.slice(0).sort(function (a, b) {
		var j, d;

		mod_assert.ok(Array.isArray(a) && Array.isArray(b));
		mod_assert.equal(a.length, b.length);
		for (j = 0; j < a.length; j++) {
			if (typeof (a[j]) == 'string')
				d = a[j].localeCompare(b[j]);
			else
				d = a[j] - b[j];

			if (d !== 0)
				return (d);
		}

		return (0);
	}));
}

/*
 * Take a pass over the results and replace quantized values with the real
 * values.  Do the same to replace timestamps.
 */
function dnOutputExpandValues(results)
{
	var coldefs, quantized;

	coldefs = results.query.qc_breakdowns;
	quantized = coldefs.length > 0 && coldefs[coldefs.length - 1].aggr;
	coldefs.forEach(function (c, j) {
		var bucketizer;

		if (quantized && j == coldefs.length - 1)
			return;

		if (results.query.qc_bucketizers.hasOwnProperty(c.name)) {
			bucketizer = results.query.qc_bucketizers[c.name];
			results.rows.forEach(function (row) {
				row[j] = bucketizer.bucketMin(row[j]);
			});
		}

		if (c.hasOwnProperty('date')) {
			results.rows.forEach(function (row) {
				row[j] = new Date(row[j] * 1000).toISOString();
			});
		}
	});
}

/*
 * Outputter that pretty-prints data.
 */
function dnOutputPretty(results)
{
	var coldefs, tablefields, quantized;

	dnOutputExpandValues(results);

	coldefs = results.query.qc_breakdowns;
	quantized = coldefs.length > 0 && coldefs[coldefs.length - 1].aggr;
	if (quantized) {
		dnOutputPrettyQuantized(results);
		return;
	}

	tablefields = coldefs.map(function (c) {
		return ({
		    'label': c.name.toUpperCase(),
		    'width': c.name.toUpperCase().toString().length
		});
	});
	tablefields.push({
	    'label': 'VALUE',
	    'width': 'VALUE'.length,
	    'align': 'right'
	});

	if (results.rows.length === 0)
		return;

	if (results.rows.length == 1 && typeof (results.rows[0]) == 'number')
		results.rows[0] = [ results.rows[0] ];

	results.rows.forEach(function (row) {
		var width;

		mod_assert.ok(row.length == coldefs.length + 1);
		coldefs.forEach(function (c, j) {
			if (typeof (row[j]) == 'number')
				tablefields[j].align = 'right';
			else
				mod_assert.equal('string', typeof (row[j]));

			width = row[j].toString().length;
			if (tablefields[j].width < width)
				tablefields[j].width = width;
		});

		mod_assert.equal('number', typeof (row[row.length - 1]));
		width = row[row.length - 1].toString().length;
		if (tablefields[row.length - 1].width < width)
			tablefields[row.length - 1].width = width;
	});

	mod_tab.emitTable({
	    'columns': tablefields,
	    'rows': dnOutputSortRows(results)
	});
}

function dnOutputPrettyQuantized(results)
{
	var coldefs, quantizedcol, stream, bucketizer, last, distr, groups;

	coldefs = results.query.qc_breakdowns;
	quantizedcol = coldefs[coldefs.length - 1];
	mod_assert.equal(typeof (quantizedcol.aggr), 'string');
	bucketizer = results.query.qc_bucketizers[quantizedcol.name];
	mod_assert.ok(bucketizer !== null);
	stream = process.stdout;
	groups = [];
	last = null;
	distr = [];

	results.rows.forEach(function (row) {
		var discrete_values = row.slice(0, coldefs.length - 1);
		var key = discrete_values.join(', ') + '\n';
		if (distr.length > 0 && key !== last) {
			groups.push({
			    'label': last,
			    'distr': distr
			});
		}

		if (key !== last) {
			last = key;
			distr = [];
		}

		distr.push([ row[coldefs.length - 1], row[coldefs.length] ]);
	});

	if (last !== null) {
		groups.push({
		    'label': last,
		    'distr': distr
		});
	}

	groups.sort(function (a, b) {
		return (a.label.localeCompare(b.label));
	});
	groups.forEach(function (g, i) {
		if (i !== 0)
			stream.write('\n');
		stream.write(g.label);
		dnPrintDistribution(stream, g.distr, bucketizer,
		    quantizedcol.hasOwnProperty('date'));
	});
}

function dnPrintDistribution(stream, distr, bucketizer, asdate)
{
	var fmt, total, count, normalized, dots;
	var bi, di, i, min;

	if (asdate) {
		stream.write('          ');
		fmt = '  %24s |%s %s\n';
	} else {
		fmt = '%16s |%s %s\n';
	}
	stream.write('           ');
	stream.write(
	    'value  ------------- Distribution ------------- count\n');

	if (distr.length === 0)
		return;

	total = 0;
	for (di = 0; di < distr.length; di++)
		total += distr[di][1];

	/*
	 * If there's a large number of empty buckets at the beginning, we're
	 * probably lookint at large values (like timestamps) where the user
	 * doesn't really want us to print all the leading empty buckets.
	 */
	if (distr[0][0] > 100)
		bi = distr[0][0];
	else
		bi = 0;

	for (di = 0; di < distr.length + 1; bi++) {
		if (di == distr.length) {
			count = 0;
			di++;
		} else if (distr[di][0] == bi) {
			count = distr[di][1];
			di++;
		} else {
			count = 0;
		}

		normalized = Math.round(40 * count / total);
		dots = '';
		for (i = 0; i < normalized; i++)
			dots += '@';
		for (; i < 40; i++)
			dots += ' ';

		min = bucketizer.bucketMin(bi);
		stream.write(sprintf(fmt, asdate ?
		    new Date(min * 1000).toISOString() : min.toString(),
		    dots, count));
	}
}

/*
 * Emit a GNUplot file to draw a graph for the given query.
 */
function dnOutputGnuplot(results)
{
	var options, query, coldefs, out, title, xquant;

	options = results.options;
	query = results.query;
	coldefs = query.qc_breakdowns;
	out = process.stdout;

	out.write('#\n');
	out.write('# This is a GNUplot input file generated automatically\n');
	out.write('# by the Dragnet "dn" command.  You can use it to create\n');
	out.write('# a graph as a PNG image (as file "graph.png") using:\n');
	out.write('#\n');
	out.write('#     gnuplot < this_file > graph.png\n');
	out.write('#\n');
	out.write('set terminal png size 1200,600\n');
	title = options._args[0]; /* XXX happens to always be datasource */
	out.write('set title "' + title + '"\n');

	if (query.qc_breakdowns[0].hasOwnProperty('date')) {
		out.write('# Configure plots to use the x-axis as time.\n');
		out.write('set xdata time;\n');
		/* configure how gnuplot should read timestamp values */
		out.write('set timefmt "%s";\n');
		/* configure how gnuplot should display timestamp values */
		out.write('set format x "%m/%d\\n%H:%MZ"\n');
	}

	out.write('# Add 10% padding at the top of the graph.\n');
	out.write('set offsets graph 0, 0, 0.1, 0\n');
	out.write('# The y-axis should always start at zero.\n');
	out.write('set yrange [0:*]\n');
	out.write('set ylabel "Count"\n');
	out.write('set ytics\n');

	/*
	 * If the x-axis value is numeric, pass it straight through to GNUplot.
	 * If not (e.g., the x-axis values are unordered values, like "GET",
	 * "PUT", and "DELETE"), then tell GNUplot to use the line number as the
	 * x-axis value and to use the first column as the x-axis label.
	 */
	mod_assert.equal(coldefs.length, 1);
	xquant = query.qc_bucketizers.hasOwnProperty(coldefs[0].name);
	if (xquant) {
		out.write('plot "-" using 1:2 with linespoints ' +
		    'title "Value"\n');
	} else {
		out.write('plot "-" using (column(0)):2:xtic(1) ' +
		    'with linespoints title "Value"\n');
	}

	/*
	 * Write the data inline into the GNUplot file.
	 */
	dnOutputSortRows(results).forEach(function (row) {
		var b, x, y;

		if (xquant) {
			b = query.qc_bucketizers[coldefs[0].name];
			x = b.bucketMin(row[0]);
		} else {
			x = row[0];
		}

		y = row[1];
		out.write('\t' + x + ' ' + y + '\n');
	});

	out.write('\te\n');
}

/*
 * Add an "exit" listener to check whether we exited prematurely.  Node exits
 * with success when there's no more work to do, but there are many kinds of
 * bugs that result in accidentally leaving no work to do (as when failing to
 * invoke a pipeline callback without scheduling additional work).  To make sure
 * we don't accidentally do this, we explicitly set dnDone when we're ready to
 * exit and we consider it a serious error if we're about to exit 0 with dnDone
 * false.
 *
 * This implementation does not affect --abort-on-uncaught-exception since that
 * will trigger an abort before we get here.  Nor does this paper over uncaught
 * exceptions, since we'll come through here with a non-zero code, won't do
 * anything, and Node will dump the exception like it normally does.
 */
process.on('exit', function (code) {
	if (dnTrackTime) {
		var timeDone = process.hrtime(timeStarted);
		console.error('timing stats:');
		console.error('    require: ', timeRequireDone);
		console.error('    total:   ', timeDone);
	}

	if (code === 0 && !dnDone) {
		console.error('ERROR: internal error: premature exit');
		if (dnStream !== undefined) {
			dnStream.vsHead().vsWalk(function (s) {
				s.vsDumpCounters(process.stderr);
			});
			console.error('----');
			dnStream.vsHead().vsWalk(function (s) {
				s.vsDumpDebug(process.stderr);
			});
		}
		process.exit(1);
	}
});

main();
